package main

import (
	"fmt"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/backend/groth16"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/r1cs"
	"github.com/consensys/gnark/std/math/uints"
	gnark_nimue "github.com/reilabs/gnark-nimue"
	skyscraper "github.com/reilabs/gnark-skyscraper"
)

type TestCircuit struct {
	IO         []byte
	Transcript [24]uints.U8 `gnark:",public"`
}

func (circuit *TestCircuit) Define(api frontend.API) error {
	arthur, err := gnark_nimue.NewKeccakArthur(api, circuit.IO, circuit.Transcript[:], false)

	if err != nil {
		return err
	}

	firstChallenge := make([]uints.U8, 8)
	err = arthur.FillChallengeBytes(firstChallenge)
	if err != nil {
		return err
	}
	firstReply := make([]uints.U8, 8)
	err = arthur.FillNextBytes(firstReply)
	if err != nil {
		return err
	}
	for i := range firstChallenge {
		api.AssertIsEqual(firstChallenge[i].Val, firstReply[i].Val)
	}

	secondChallenge := make([]uints.U8, 16)
	err = arthur.FillChallengeBytes(secondChallenge)
	if err != nil {
		return err
	}
	secondReply := make([]uints.U8, 16)
	err = arthur.FillNextBytes(secondReply)
	if err != nil {
		return err
	}
	for i := range secondChallenge {
		api.AssertIsEqual(secondChallenge[i].Val, secondReply[i].Val)
	}

	return nil
}

func Example1() {
	// the protocol has two rounds in which the verifier sends 8/16 bytes of randomness and the prover must send it back
	badIOPat := "bad-protocol\u0000S8first challenge\u0000A8first reply\u0000S16second challenge\u0000A16second reply"
	io := gnark_nimue.IOPattern{}
	_ = io.Parse([]byte(badIOPat))
	fmt.Printf("io: %s\n", io.PPrint())

	circ := TestCircuit{
		IO: []byte(badIOPat),
	}

	ccs, _ := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &circ)
	pk, vk, _ := groth16.Setup(ccs)

	transcriptBytes := []byte{9, 2, 243, 247, 30, 73, 172, 83, 203, 176, 231, 217, 99, 6, 2, 176, 93, 1, 93, 32, 162, 116, 211, 219}

	transcript := [24]uints.U8(uints.NewU8Array(transcriptBytes[:]))

	assignment := TestCircuit{
		IO:         []byte(badIOPat),
		Transcript: transcript,
	}

	witness, _ := frontend.NewWitness(&assignment, ecc.BN254.ScalarField())
	publicWitness, _ := witness.Public()

	proof, _ := groth16.Prove(ccs, pk, witness)
	vErr := groth16.Verify(proof, vk, publicWitness)
	fmt.Printf("%v\n", vErr)
}

type WhirCircuit struct {
	IO         []byte
	Transcript [2312]uints.U8 `gnark:",public"`
}

func (circuit *WhirCircuit) Define(api frontend.API) error {
	arthur, err := gnark_nimue.NewKeccakArthur(api, circuit.IO, circuit.Transcript[:], false)
	if err != nil {
		return err
	}

	merkleRoot := make([]uints.U8, 32)
	err = arthur.FillNextBytes(merkleRoot)
	if err != nil {
		return err
	}
	rootVars := make([]frontend.Variable, 32)
	for i := range merkleRoot {
		rootVars[i] = merkleRoot[i].Val
	}
	api.Println(rootVars...)

	oodCh := [1]frontend.Variable{}
	err = arthur.FillChallengeScalars(oodCh[:])
	if err != nil {
		return err
	}
	api.Println(oodCh[:]...)

	oodAns := [1]frontend.Variable{}
	err = arthur.FillNextScalars(oodAns[:])
	if err != nil {
		return err
	}
	api.Println(oodAns[:]...)

	initialCombinationRandomness := [1]frontend.Variable{}
	err = arthur.FillChallengeScalars(initialCombinationRandomness[:])
	if err != nil {
		return err
	}
	api.Println(initialCombinationRandomness[0])

	for range 4 {
		sumcheckPolyEvals := [3]frontend.Variable{}
		err = arthur.FillNextScalars(sumcheckPolyEvals[:])
		if err != nil {
			return err
		}
		api.Println(sumcheckPolyEvals[:]...)

		foldingRandomnessSingle := [1]frontend.Variable{}
		err = arthur.FillChallengeScalars(foldingRandomnessSingle[:])
		if err != nil {
			return err
		}
		api.Println(foldingRandomnessSingle[0])
	}

	return nil
}

func ExampleWhir() {

	ioPat := "ðŸŒª\ufe0f\u0000A32merkle_digest\u0000S47ood_query\u0000A32ood_ans\u0000S47initial_combination_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A32merkle_digest\u0000S47ood_query\u0000A32ood_ans\u0000S246stir_queries\u0000S32pow_queries\u0000A8pow-nonce\u0000S47combination_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A32merkle_digest\u0000S47ood_query\u0000A32ood_ans\u0000S42stir_queries\u0000S32pow_queries\u0000A8pow-nonce\u0000S47combination_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A32merkle_digest\u0000S47ood_query\u0000A32ood_ans\u0000S24stir_queries\u0000S32pow_queries\u0000A8pow-nonce\u0000S47combination_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A32merkle_digest\u0000S47ood_query\u0000A32ood_ans\u0000S18stir_queries\u0000S32pow_queries\u0000A8pow-nonce\u0000S47combination_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A96sumcheck_poly\u0000S47folding_randomness\u0000A32final_coeffs\u0000S14final_queries\u0000S32pow_queries\u0000A8pow-nonce"
	io := gnark_nimue.IOPattern{}
	_ = io.Parse([]byte(ioPat))
	fmt.Printf("io: %s\n", io.PPrint())

	circ := WhirCircuit{
		IO: []byte(ioPat),
	}

	ccs, err := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &circ)
	if err != nil {
		fmt.Println(err)
		return
	}
	pk, vk, _ := groth16.Setup(ccs)

	transcriptBytes := [2312]byte{87, 185, 236, 158, 191, 94, 0, 231, 238, 211, 192, 186, 214, 75, 100, 146, 70, 205, 148, 111, 212, 159, 189, 24, 133, 148, 249, 15, 115, 111, 196, 121, 135, 161, 80, 122, 19, 19, 233, 232, 181, 197, 70, 8, 212, 80, 150, 245, 202, 64, 72, 187, 56, 241, 42, 254, 231, 229, 105, 128, 133, 27, 76, 40, 88, 120, 111, 43, 112, 48, 112, 158, 10, 249, 193, 212, 55, 196, 153, 147, 89, 70, 185, 173, 252, 43, 180, 82, 242, 220, 202, 151, 116, 33, 54, 18, 47, 41, 225, 78, 163, 226, 120, 74, 171, 204, 132, 51, 156, 140, 252, 97, 113, 250, 142, 13, 60, 197, 118, 171, 245, 8, 159, 232, 16, 250, 21, 22, 192, 89, 99, 186, 101, 64, 205, 53, 96, 199, 156, 105, 110, 249, 74, 23, 4, 174, 185, 89, 43, 116, 229, 124, 162, 5, 11, 141, 213, 3, 2, 25, 164, 183, 159, 94, 149, 247, 19, 218, 240, 85, 255, 161, 162, 54, 173, 3, 44, 143, 231, 97, 88, 134, 212, 30, 201, 171, 46, 26, 39, 202, 210, 33, 92, 114, 238, 219, 148, 110, 62, 68, 188, 172, 29, 149, 122, 159, 84, 112, 247, 144, 170, 43, 246, 22, 77, 25, 61, 249, 94, 228, 6, 111, 112, 27, 3, 71, 240, 133, 69, 27, 92, 33, 20, 248, 81, 224, 87, 30, 240, 69, 36, 242, 21, 161, 233, 241, 91, 42, 41, 143, 186, 52, 30, 98, 161, 41, 178, 225, 52, 217, 71, 191, 247, 28, 90, 161, 137, 204, 152, 89, 251, 139, 147, 65, 211, 53, 158, 54, 29, 224, 174, 222, 75, 230, 165, 219, 214, 36, 162, 207, 226, 208, 187, 179, 142, 94, 82, 92, 224, 71, 193, 166, 238, 56, 106, 39, 250, 198, 102, 21, 82, 248, 41, 220, 77, 164, 25, 56, 151, 14, 104, 18, 36, 90, 50, 254, 81, 173, 47, 104, 47, 13, 3, 160, 199, 20, 17, 165, 149, 241, 62, 225, 10, 87, 240, 80, 111, 245, 23, 127, 71, 17, 9, 127, 124, 159, 69, 63, 111, 25, 148, 86, 160, 2, 202, 82, 92, 172, 151, 171, 152, 10, 236, 77, 182, 119, 98, 40, 91, 55, 29, 11, 109, 37, 158, 191, 128, 20, 69, 238, 68, 203, 191, 19, 56, 38, 218, 79, 54, 188, 77, 233, 121, 56, 143, 174, 124, 188, 53, 180, 49, 67, 232, 61, 150, 44, 86, 224, 193, 186, 125, 248, 254, 102, 157, 181, 174, 174, 73, 139, 55, 9, 28, 37, 225, 225, 78, 189, 122, 16, 153, 242, 255, 168, 253, 8, 120, 19, 94, 7, 3, 84, 60, 99, 104, 241, 7, 34, 138, 31, 137, 254, 65, 33, 166, 242, 195, 236, 38, 44, 139, 243, 244, 201, 17, 104, 201, 52, 190, 23, 199, 167, 230, 165, 249, 5, 123, 187, 123, 218, 211, 76, 174, 197, 112, 202, 186, 164, 96, 249, 112, 130, 240, 110, 119, 85, 187, 87, 83, 224, 146, 26, 0, 0, 0, 0, 0, 9, 109, 64, 254, 9, 55, 39, 22, 185, 99, 224, 254, 123, 36, 149, 105, 175, 218, 200, 145, 167, 153, 120, 146, 197, 134, 218, 111, 146, 146, 134, 245, 135, 141, 32, 136, 22, 43, 231, 107, 85, 77, 194, 127, 164, 209, 174, 93, 202, 128, 182, 97, 48, 78, 28, 248, 153, 90, 241, 68, 186, 184, 255, 255, 180, 29, 39, 147, 144, 43, 255, 46, 109, 146, 124, 191, 162, 228, 163, 122, 42, 234, 132, 114, 170, 39, 181, 50, 119, 221, 67, 163, 243, 108, 104, 205, 173, 226, 7, 1, 81, 148, 231, 104, 214, 38, 211, 181, 57, 174, 207, 118, 174, 0, 93, 25, 16, 220, 29, 45, 177, 61, 104, 150, 18, 240, 252, 148, 154, 245, 14, 132, 112, 222, 240, 214, 177, 27, 134, 189, 104, 32, 33, 99, 61, 199, 135, 93, 86, 122, 156, 194, 109, 15, 202, 31, 82, 201, 52, 28, 153, 159, 24, 135, 237, 23, 209, 80, 44, 4, 121, 27, 163, 33, 102, 47, 32, 87, 180, 136, 69, 0, 142, 50, 49, 135, 88, 241, 88, 26, 92, 185, 147, 178, 29, 152, 93, 112, 17, 8, 86, 90, 222, 123, 86, 115, 121, 240, 223, 59, 30, 48, 80, 107, 168, 239, 9, 154, 55, 184, 86, 86, 154, 176, 43, 248, 35, 160, 117, 130, 151, 12, 46, 105, 94, 0, 70, 145, 75, 47, 58, 46, 82, 197, 172, 150, 28, 33, 106, 28, 162, 138, 135, 111, 46, 225, 95, 239, 4, 134, 222, 56, 181, 216, 47, 241, 14, 205, 234, 130, 220, 184, 130, 219, 83, 251, 128, 95, 189, 95, 23, 201, 206, 148, 195, 7, 172, 188, 142, 84, 32, 103, 92, 18, 194, 173, 70, 168, 73, 125, 65, 245, 176, 94, 118, 173, 190, 210, 102, 195, 93, 230, 116, 200, 37, 0, 11, 206, 131, 204, 55, 64, 1, 70, 48, 228, 26, 250, 183, 67, 94, 13, 49, 94, 162, 192, 74, 53, 183, 131, 205, 45, 51, 247, 33, 222, 249, 215, 6, 69, 74, 4, 9, 124, 4, 83, 240, 215, 48, 97, 140, 255, 178, 192, 69, 117, 248, 79, 207, 211, 113, 66, 66, 123, 20, 178, 217, 83, 84, 191, 231, 162, 136, 28, 122, 175, 45, 140, 114, 92, 196, 223, 111, 155, 1, 105, 155, 123, 211, 180, 141, 74, 62, 43, 216, 132, 209, 179, 115, 71, 208, 102, 176, 246, 57, 255, 42, 127, 36, 48, 111, 159, 167, 33, 199, 234, 173, 12, 175, 8, 185, 146, 118, 220, 196, 137, 22, 98, 85, 213, 235, 196, 219, 162, 162, 34, 29, 134, 213, 207, 37, 0, 0, 0, 0, 0, 1, 144, 91, 199, 32, 201, 33, 250, 79, 217, 121, 167, 76, 89, 184, 118, 237, 153, 74, 255, 88, 88, 56, 58, 110, 100, 50, 83, 200, 98, 55, 87, 200, 122, 35, 122, 127, 230, 255, 207, 241, 66, 13, 233, 175, 38, 247, 90, 27, 123, 210, 234, 202, 216, 233, 100, 227, 199, 119, 164, 36, 251, 86, 189, 137, 149, 1, 166, 183, 155, 59, 195, 124, 211, 144, 109, 9, 179, 68, 60, 36, 180, 62, 65, 198, 146, 50, 181, 229, 25, 67, 74, 74, 230, 231, 1, 19, 47, 7, 92, 202, 144, 86, 49, 224, 170, 148, 73, 128, 211, 19, 108, 155, 209, 64, 216, 187, 223, 74, 228, 248, 238, 189, 20, 60, 153, 94, 95, 82, 15, 13, 219, 6, 243, 18, 84, 127, 240, 125, 140, 121, 110, 176, 214, 16, 110, 87, 106, 71, 246, 169, 206, 98, 8, 67, 130, 188, 120, 0, 111, 203, 138, 45, 165, 2, 141, 75, 6, 90, 177, 201, 58, 72, 18, 38, 126, 59, 127, 45, 50, 0, 88, 73, 8, 194, 221, 79, 73, 120, 141, 7, 52, 53, 246, 43, 42, 136, 207, 190, 91, 189, 183, 156, 249, 198, 180, 148, 204, 191, 230, 235, 99, 215, 199, 44, 228, 222, 227, 122, 187, 219, 239, 225, 48, 147, 71, 4, 234, 126, 77, 193, 246, 113, 96, 158, 69, 210, 219, 172, 66, 226, 97, 197, 243, 210, 245, 43, 230, 166, 148, 53, 38, 242, 6, 185, 240, 178, 153, 36, 171, 251, 215, 43, 82, 190, 201, 78, 162, 64, 11, 166, 211, 188, 78, 97, 75, 250, 160, 37, 88, 224, 141, 7, 107, 171, 118, 238, 193, 234, 185, 47, 139, 132, 242, 79, 229, 208, 6, 215, 150, 6, 206, 94, 82, 225, 201, 55, 117, 216, 97, 5, 124, 14, 32, 62, 32, 169, 239, 6, 11, 32, 208, 42, 159, 4, 90, 46, 88, 92, 112, 68, 101, 206, 225, 209, 61, 105, 150, 25, 243, 56, 98, 36, 71, 212, 136, 37, 168, 86, 168, 0, 200, 111, 102, 30, 216, 117, 7, 184, 229, 148, 246, 70, 4, 36, 150, 45, 203, 214, 223, 7, 176, 124, 91, 189, 38, 69, 255, 121, 220, 171, 17, 12, 201, 165, 148, 42, 36, 226, 64, 188, 232, 149, 129, 182, 196, 211, 231, 112, 219, 199, 180, 251, 25, 127, 201, 40, 50, 209, 35, 187, 244, 8, 253, 13, 58, 51, 215, 213, 93, 71, 155, 162, 60, 183, 10, 131, 150, 2, 34, 136, 195, 216, 59, 27, 79, 87, 61, 89, 196, 35, 157, 2, 97, 87, 124, 159, 21, 95, 253, 12, 0, 0, 0, 0, 0, 0, 105, 182, 23, 96, 17, 103, 176, 147, 43, 209, 155, 7, 149, 215, 90, 134, 209, 131, 172, 52, 19, 26, 117, 71, 210, 234, 63, 244, 100, 146, 139, 29, 57, 3, 221, 173, 201, 105, 255, 91, 18, 20, 178, 71, 164, 82, 3, 211, 137, 32, 124, 162, 239, 183, 118, 201, 239, 119, 192, 146, 5, 249, 42, 106, 95, 29, 83, 22, 49, 19, 125, 238, 144, 154, 253, 204, 175, 245, 207, 244, 25, 67, 78, 11, 63, 138, 99, 211, 244, 208, 200, 167, 55, 183, 46, 253, 20, 22, 58, 164, 242, 50, 161, 145, 13, 223, 130, 26, 151, 204, 40, 6, 222, 125, 35, 108, 194, 106, 55, 248, 227, 174, 141, 91, 61, 178, 4, 197, 203, 14, 104, 98, 60, 111, 231, 221, 138, 98, 111, 223, 18, 56, 73, 139, 132, 18, 99, 4, 70, 92, 221, 81, 89, 221, 31, 149, 228, 72, 177, 231, 162, 1, 143, 229, 94, 110, 70, 182, 186, 28, 107, 157, 66, 214, 14, 174, 195, 93, 201, 170, 217, 86, 51, 114, 203, 28, 109, 123, 221, 192, 188, 101, 220, 0, 136, 209, 19, 234, 172, 136, 44, 218, 91, 143, 112, 74, 1, 232, 255, 61, 51, 21, 156, 175, 150, 15, 226, 86, 180, 132, 105, 134, 156, 62, 115, 34, 242, 103, 165, 107, 215, 182, 237, 110, 206, 251, 23, 252, 60, 116, 14, 246, 197, 142, 32, 197, 163, 248, 117, 251, 118, 175, 241, 83, 30, 60, 122, 5, 8, 4, 208, 46, 145, 180, 75, 249, 160, 172, 167, 56, 154, 209, 154, 58, 68, 106, 57, 195, 63, 189, 129, 192, 141, 56, 241, 228, 20, 111, 2, 15, 35, 102, 36, 97, 79, 46, 161, 210, 136, 100, 218, 105, 44, 53, 253, 221, 227, 239, 112, 219, 32, 11, 16, 207, 47, 62, 150, 15, 60, 50, 43, 14, 182, 155, 173, 140, 104, 227, 180, 144, 89, 200, 228, 254, 193, 196, 35, 167, 199, 133, 224, 250, 242, 125, 159, 249, 79, 138, 184, 113, 152, 93, 63, 37, 197, 185, 91, 25, 235, 195, 56, 227, 172, 245, 67, 154, 20, 118, 95, 228, 170, 115, 81, 112, 150, 5, 109, 240, 219, 70, 185, 156, 109, 202, 187, 3, 56, 121, 194, 103, 163, 220, 195, 194, 178, 85, 188, 116, 211, 58, 208, 200, 151, 61, 54, 144, 202, 62, 172, 67, 176, 226, 186, 183, 177, 12, 37, 237, 3, 118, 201, 63, 2, 168, 126, 57, 46, 1, 95, 18, 174, 220, 232, 113, 228, 181, 42, 83, 197, 182, 71, 246, 6, 236, 115, 211, 177, 216, 197, 38, 0, 0, 0, 0, 0, 0, 2, 89, 189, 144, 235, 204, 167, 169, 168, 38, 73, 206, 68, 197, 88, 229, 37, 140, 130, 136, 209, 243, 101, 106, 236, 47, 90, 144, 178, 14, 58, 61, 188, 17, 231, 108, 82, 230, 147, 59, 123, 231, 31, 236, 57, 152, 178, 187, 190, 73, 58, 106, 197, 255, 20, 209, 100, 96, 89, 43, 25, 74, 62, 189, 188, 10, 141, 136, 177, 57, 230, 164, 235, 5, 26, 236, 35, 39, 235, 12, 13, 232, 115, 234, 135, 159, 9, 63, 44, 64, 119, 124, 11, 25, 62, 181, 112, 1, 165, 113, 86, 130, 154, 71, 110, 155, 140, 210, 40, 114, 246, 29, 145, 131, 53, 145, 137, 116, 162, 207, 133, 194, 213, 4, 30, 202, 3, 24, 163, 37, 98, 161, 183, 219, 52, 222, 8, 86, 98, 36, 60, 99, 31, 170, 249, 62, 129, 195, 77, 38, 250, 225, 42, 210, 78, 125, 80, 166, 198, 174, 173, 41, 195, 47, 66, 55, 9, 230, 51, 30, 83, 150, 123, 81, 9, 189, 234, 174, 163, 147, 23, 224, 125, 36, 178, 238, 247, 174, 77, 80, 35, 146, 140, 29, 170, 29, 13, 118, 154, 71, 130, 24, 177, 113, 24, 9, 132, 112, 72, 200, 157, 91, 33, 134, 62, 69, 30, 87, 228, 124, 56, 83, 163, 104, 218, 46, 215, 28, 233, 160, 69, 59, 178, 226, 17, 110, 125, 2, 182, 16, 51, 35, 148, 248, 78, 159, 29, 186, 68, 167, 191, 2, 183, 134, 108, 180, 130, 41, 85, 103, 179, 188, 87, 122, 249, 218, 106, 177, 188, 208, 24, 108, 242, 177, 55, 92, 123, 139, 176, 61, 139, 79, 148, 85, 160, 145, 179, 236, 144, 40, 47, 132, 244, 230, 31, 192, 174, 93, 184, 180, 48, 126, 222, 121, 238, 199, 253, 153, 19, 208, 202, 236, 239, 153, 252, 108, 48, 125, 133, 14, 136, 25, 90, 194, 6, 228, 182, 150, 53, 103, 62, 155, 172, 92, 206, 141, 12, 45, 226, 36, 4, 58, 228, 53, 13, 68, 0, 65, 81, 31, 159, 195, 111, 21, 245, 150, 32, 247, 60, 235, 46, 214, 148, 144, 135, 82, 26, 147, 102, 246, 25, 189, 181, 13, 211, 192, 42, 144, 52, 165, 201, 215, 185, 85, 61, 37, 186, 201, 189, 210, 75, 145, 128, 244, 94, 215, 198, 15, 212, 94, 134, 79, 105, 228, 88, 3, 126, 242, 193, 194, 171, 219, 194, 164, 29, 36, 82, 36, 0, 0, 0, 0, 0, 0, 1, 122}

	transcript := [2312]uints.U8{}
	for i := range transcriptBytes {
		transcript[i] = uints.NewU8(transcriptBytes[i])
	}

	assignment := WhirCircuit{
		IO:         []byte(ioPat),
		Transcript: transcript,
	}

	witness, _ := frontend.NewWitness(&assignment, ecc.BN254.ScalarField())
	publicWitness, _ := witness.Public()

	proof, _ := groth16.Prove(ccs, pk, witness)
	vErr := groth16.Verify(proof, vk, publicWitness)
	fmt.Printf("%v\n", vErr)
}

type WhirSkyscraperCircuit struct {
	IO         []byte
	Transcript [2312]uints.U8 `gnark:",public"`
}

func (circuit *WhirSkyscraperCircuit) Define(api frontend.API) error {
	sc := skyscraper.NewSkyscraper(api, 2)
	arthur, err := gnark_nimue.NewSkyscraperArthur(api, sc, circuit.IO, circuit.Transcript[:], false)
	if err != nil {
		return err
	}

	merkleRoot := make([]frontend.Variable, 1)
	err = arthur.FillNextScalars(merkleRoot)
	if err != nil {
		return err
	}

	api.Println(merkleRoot...)

	oodCh := [1]frontend.Variable{}
	err = arthur.FillChallengeScalars(oodCh[:])
	if err != nil {
		return err
	}
	api.Println(oodCh[:]...)

	oodAns := [1]frontend.Variable{}
	err = arthur.FillNextScalars(oodAns[:])
	if err != nil {
		return err
	}
	api.Println(oodAns[:]...)

	initialCombinationRandomness := [1]frontend.Variable{}
	err = arthur.FillChallengeScalars(initialCombinationRandomness[:])
	if err != nil {
		return err
	}
	api.Println(initialCombinationRandomness[0])

	for range 4 {
		sumcheckPolyEvals := [3]frontend.Variable{}
		err = arthur.FillNextScalars(sumcheckPolyEvals[:])
		if err != nil {
			return err
		}
		api.Println(sumcheckPolyEvals[:]...)

		foldingRandomnessSingle := [1]frontend.Variable{}
		err = arthur.FillChallengeScalars(foldingRandomnessSingle[:])
		if err != nil {
			return err
		}
		api.Println(foldingRandomnessSingle[0])
	}

	return nil
}

func ExampleWhirSkyScraper() {
	ioPat := "ðŸŒª\ufe0f\u0000A1merkle_digest\u0000S1ood_query\u0000A1ood_ans\u0000S1initial_combination_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A1merkle_digest\u0000S1ood_query\u0000A1ood_ans\u0000S17stir_queries\u0000S3pow_queries\u0000A8pow-nonce\u0000S1combination_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A1merkle_digest\u0000S1ood_query\u0000A1ood_ans\u0000S3stir_queries\u0000S3pow_queries\u0000A8pow-nonce\u0000S1combination_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A1merkle_digest\u0000S1ood_query\u0000A1ood_ans\u0000S2stir_queries\u0000S3pow_queries\u0000A8pow-nonce\u0000S1combination_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A1merkle_digest\u0000S1ood_query\u0000A1ood_ans\u0000S2stir_queries\u0000S3pow_queries\u0000A8pow-nonce\u0000S1combination_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A3sumcheck_poly\u0000S1folding_randomness\u0000A1final_coeffs\u0000S1final_queries\u0000S3pow_queries\u0000A8pow-nonce"
	io := gnark_nimue.IOPattern{}
	_ = io.Parse([]byte(ioPat))
	fmt.Printf("io: %s\n", io.PPrint())

	circ := WhirSkyscraperCircuit{
		IO: []byte(ioPat),
	}

	ccs, err := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &circ)
	if err != nil {
		fmt.Println(err)
		return
	}
	pk, vk, _ := groth16.Setup(ccs)
	transcriptBytes := [2312]byte{145, 161, 51, 30, 17, 249, 191, 189, 138, 135, 162, 50, 48, 19, 72, 191, 143, 92, 125, 50, 164, 84, 45, 78, 46, 100, 223, 183, 172, 125, 52, 44, 208, 242, 161, 135, 200, 32, 189, 248, 221, 229, 8, 0, 247, 198, 49, 102, 76, 167, 255, 4, 175, 156, 198, 58, 207, 254, 193, 17, 142, 218, 242, 33, 249, 38, 98, 249, 37, 215, 159, 251, 110, 222, 124, 76, 107, 17, 215, 167, 227, 237, 153, 187, 19, 201, 82, 102, 179, 153, 172, 235, 64, 84, 65, 4, 215, 203, 63, 142, 162, 73, 29, 253, 110, 7, 140, 179, 139, 181, 90, 190, 104, 185, 101, 73, 155, 211, 115, 212, 27, 101, 21, 38, 77, 134, 177, 29, 20, 231, 224, 183, 146, 39, 108, 255, 61, 234, 61, 170, 88, 93, 57, 205, 165, 123, 85, 160, 124, 118, 151, 7, 68, 143, 79, 241, 225, 98, 208, 9, 84, 165, 193, 163, 117, 216, 5, 233, 8, 254, 1, 200, 253, 35, 101, 200, 105, 86, 177, 97, 185, 142, 141, 201, 228, 144, 61, 88, 214, 251, 100, 7, 148, 75, 122, 127, 61, 235, 136, 125, 168, 239, 165, 214, 30, 212, 253, 99, 38, 153, 160, 188, 101, 125, 80, 137, 184, 4, 89, 155, 168, 169, 26, 32, 242, 199, 69, 106, 112, 118, 123, 199, 232, 219, 10, 122, 93, 107, 184, 81, 98, 164, 27, 230, 86, 214, 88, 32, 204, 123, 42, 14, 102, 161, 123, 43, 173, 138, 9, 207, 254, 181, 2, 96, 113, 28, 124, 228, 193, 161, 16, 156, 218, 169, 143, 126, 112, 69, 230, 244, 86, 214, 122, 95, 85, 13, 133, 10, 74, 180, 116, 102, 188, 116, 167, 242, 74, 86, 44, 37, 122, 153, 82, 98, 18, 35, 77, 69, 187, 148, 144, 116, 26, 212, 197, 53, 122, 224, 39, 29, 194, 142, 194, 186, 144, 113, 4, 186, 207, 193, 63, 211, 215, 41, 138, 62, 188, 52, 158, 2, 8, 179, 220, 201, 16, 152, 47, 31, 102, 192, 55, 47, 112, 70, 254, 227, 62, 182, 42, 220, 226, 234, 116, 133, 180, 207, 131, 162, 106, 6, 61, 151, 84, 180, 90, 218, 109, 29, 148, 244, 12, 45, 11, 20, 230, 22, 140, 87, 208, 189, 83, 9, 129, 120, 195, 238, 144, 141, 228, 47, 184, 90, 120, 83, 187, 186, 211, 218, 217, 242, 77, 84, 35, 102, 49, 46, 210, 161, 166, 181, 16, 210, 205, 166, 88, 249, 38, 182, 146, 50, 156, 70, 213, 166, 52, 214, 73, 207, 78, 129, 45, 208, 214, 29, 133, 140, 3, 27, 223, 89, 65, 96, 200, 106, 43, 78, 161, 184, 171, 145, 235, 198, 9, 149, 111, 106, 246, 52, 66, 134, 36, 170, 230, 160, 145, 95, 10, 110, 162, 29, 15, 134, 228, 172, 30, 11, 170, 202, 46, 42, 253, 10, 43, 201, 207, 119, 141, 28, 40, 4, 46, 139, 228, 43, 251, 4, 187, 17, 87, 217, 15, 27, 0, 0, 0, 0, 0, 11, 180, 248, 172, 54, 127, 92, 252, 119, 149, 39, 49, 3, 99, 226, 166, 21, 126, 72, 128, 121, 138, 228, 221, 111, 25, 8, 19, 111, 123, 48, 33, 133, 57, 30, 118, 28, 71, 66, 36, 249, 33, 205, 121, 100, 211, 170, 47, 181, 28, 231, 81, 235, 111, 149, 232, 133, 154, 238, 8, 165, 227, 85, 8, 4, 254, 46, 140, 181, 206, 8, 230, 77, 235, 106, 204, 239, 34, 243, 30, 7, 132, 80, 86, 17, 128, 234, 123, 93, 237, 72, 174, 109, 70, 230, 45, 49, 197, 43, 186, 39, 43, 60, 42, 234, 235, 26, 247, 233, 154, 94, 128, 255, 228, 221, 43, 186, 186, 21, 91, 67, 123, 149, 18, 137, 87, 110, 133, 89, 191, 12, 27, 57, 5, 132, 150, 167, 154, 170, 185, 208, 250, 107, 174, 46, 213, 55, 241, 125, 153, 138, 59, 78, 158, 156, 57, 79, 229, 172, 124, 227, 163, 9, 89, 74, 206, 13, 144, 49, 136, 118, 38, 18, 121, 79, 190, 240, 144, 130, 150, 221, 226, 62, 165, 181, 178, 238, 96, 4, 14, 208, 215, 0, 117, 27, 67, 210, 10, 197, 93, 99, 9, 28, 110, 16, 116, 233, 138, 94, 201, 93, 39, 171, 193, 188, 173, 23, 207, 81, 101, 222, 105, 130, 85, 83, 152, 23, 151, 16, 31, 145, 115, 45, 143, 26, 102, 134, 27, 177, 101, 228, 215, 15, 108, 246, 124, 157, 0, 140, 228, 220, 252, 208, 59, 25, 199, 18, 209, 17, 175, 79, 208, 255, 70, 158, 239, 124, 189, 244, 198, 122, 96, 137, 239, 74, 124, 43, 145, 121, 87, 168, 152, 51, 253, 21, 155, 95, 37, 240, 243, 40, 249, 255, 73, 76, 172, 8, 191, 88, 132, 229, 137, 225, 101, 36, 189, 41, 185, 200, 94, 131, 103, 19, 186, 222, 101, 24, 181, 106, 62, 186, 232, 2, 252, 144, 112, 245, 7, 36, 228, 198, 240, 52, 91, 254, 17, 35, 183, 116, 174, 43, 210, 72, 110, 156, 247, 73, 36, 253, 75, 205, 140, 181, 72, 28, 126, 114, 98, 141, 62, 155, 64, 204, 11, 34, 206, 75, 194, 70, 111, 253, 234, 47, 125, 96, 208, 216, 29, 173, 247, 88, 167, 67, 134, 35, 72, 18, 217, 107, 170, 118, 83, 206, 199, 193, 120, 168, 251, 138, 124, 55, 20, 221, 28, 111, 49, 44, 16, 23, 16, 120, 181, 10, 236, 206, 6, 187, 168, 47, 171, 133, 215, 89, 158, 220, 111, 154, 190, 53, 121, 101, 108, 199, 69, 218, 193, 180, 186, 223, 240, 237, 90, 118, 30, 40, 190, 23, 34, 10, 108, 1, 0, 0, 0, 0, 0, 1, 73, 185, 93, 169, 52, 83, 24, 151, 111, 92, 66, 61, 4, 54, 147, 105, 170, 246, 164, 240, 84, 198, 238, 39, 213, 143, 239, 5, 185, 221, 208, 29, 165, 9, 88, 53, 128, 228, 58, 126, 239, 129, 205, 99, 206, 57, 54, 85, 203, 6, 216, 71, 8, 90, 147, 92, 28, 162, 122, 19, 207, 28, 16, 96, 146, 31, 131, 55, 195, 133, 33, 208, 158, 187, 117, 11, 4, 104, 15, 255, 93, 157, 138, 250, 141, 7, 113, 39, 210, 126, 124, 31, 187, 143, 168, 170, 221, 34, 72, 174, 59, 254, 135, 111, 133, 10, 137, 73, 95, 158, 103, 13, 74, 207, 45, 160, 133, 76, 31, 47, 43, 127, 19, 234, 213, 191, 216, 233, 136, 40, 163, 221, 146, 203, 74, 241, 120, 136, 13, 172, 238, 26, 165, 188, 198, 129, 16, 77, 54, 46, 233, 95, 242, 21, 11, 66, 193, 138, 224, 176, 106, 1, 71, 181, 255, 65, 32, 203, 169, 80, 232, 129, 86, 94, 74, 103, 93, 64, 229, 172, 168, 89, 12, 14, 183, 98, 138, 205, 244, 155, 41, 250, 149, 20, 227, 238, 254, 175, 190, 193, 14, 97, 201, 207, 172, 52, 10, 42, 85, 196, 175, 236, 43, 132, 11, 91, 161, 20, 173, 170, 248, 161, 246, 218, 49, 30, 50, 106, 229, 210, 95, 83, 92, 213, 81, 135, 39, 2, 47, 99, 59, 57, 182, 182, 29, 131, 38, 34, 61, 178, 147, 139, 212, 182, 227, 131, 72, 1, 37, 233, 5, 155, 149, 24, 144, 68, 163, 194, 24, 249, 164, 214, 167, 251, 94, 187, 89, 112, 48, 57, 185, 155, 94, 83, 15, 44, 164, 192, 181, 11, 236, 5, 180, 143, 195, 187, 83, 90, 68, 10, 160, 205, 57, 83, 121, 223, 216, 242, 35, 100, 230, 5, 194, 250, 122, 122, 136, 203, 212, 3, 214, 25, 158, 125, 137, 82, 43, 192, 193, 219, 4, 61, 232, 169, 200, 1, 138, 87, 149, 121, 232, 84, 252, 215, 235, 141, 68, 238, 66, 60, 118, 96, 119, 42, 223, 234, 50, 49, 14, 58, 57, 175, 183, 217, 110, 71, 20, 94, 143, 38, 200, 105, 236, 231, 65, 1, 41, 6, 146, 20, 250, 72, 100, 63, 99, 3, 249, 250, 66, 249, 170, 192, 132, 203, 219, 27, 65, 73, 52, 33, 210, 230, 170, 30, 222, 151, 166, 65, 154, 15, 66, 154, 103, 247, 80, 77, 116, 26, 74, 29, 17, 89, 124, 51, 127, 3, 63, 61, 90, 93, 229, 254, 211, 206, 100, 46, 156, 225, 236, 105, 170, 2, 199, 217, 171, 228, 40, 118, 3, 41, 0, 0, 0, 0, 0, 1, 129, 226, 210, 0, 195, 118, 193, 134, 253, 13, 145, 166, 48, 144, 131, 168, 62, 238, 65, 133, 247, 59, 167, 5, 197, 246, 107, 144, 97, 249, 26, 48, 45, 11, 177, 145, 35, 235, 62, 40, 66, 241, 85, 254, 82, 65, 189, 59, 220, 140, 31, 32, 129, 75, 253, 86, 109, 232, 2, 112, 47, 196, 113, 28, 44, 30, 160, 89, 68, 69, 110, 218, 115, 94, 19, 113, 19, 122, 40, 228, 41, 109, 246, 225, 114, 160, 7, 78, 130, 33, 229, 32, 206, 26, 200, 186, 24, 27, 60, 194, 216, 33, 189, 214, 116, 165, 2, 210, 135, 166, 251, 114, 26, 120, 149, 4, 163, 177, 102, 88, 43, 227, 55, 190, 182, 104, 159, 58, 226, 27, 174, 244, 241, 252, 77, 77, 218, 163, 45, 208, 190, 60, 135, 50, 5, 143, 104, 25, 200, 215, 205, 237, 54, 120, 34, 64, 9, 5, 204, 149, 246, 44, 221, 49, 80, 82, 137, 94, 16, 21, 32, 86, 41, 228, 110, 178, 31, 84, 93, 36, 177, 24, 173, 199, 125, 152, 129, 200, 221, 141, 233, 210, 179, 24, 44, 249, 77, 45, 62, 189, 52, 10, 212, 250, 57, 222, 12, 19, 170, 135, 120, 45, 12, 11, 69, 211, 182, 150, 79, 20, 167, 6, 203, 4, 81, 6, 3, 226, 141, 65, 199, 118, 138, 117, 125, 127, 54, 97, 158, 220, 8, 27, 20, 41, 229, 141, 203, 181, 30, 227, 27, 165, 13, 184, 10, 50, 195, 3, 2, 152, 32, 122, 198, 124, 15, 23, 138, 223, 218, 121, 50, 53, 231, 166, 158, 19, 22, 111, 133, 15, 151, 224, 115, 59, 14, 145, 133, 2, 148, 1, 200, 68, 133, 47, 168, 71, 69, 59, 55, 121, 157, 6, 48, 48, 182, 24, 110, 20, 224, 64, 248, 139, 189, 112, 42, 101, 76, 114, 186, 136, 219, 11, 58, 188, 8, 23, 135, 165, 66, 242, 243, 22, 156, 206, 84, 74, 182, 3, 62, 203, 160, 29, 75, 147, 89, 176, 57, 170, 208, 222, 198, 96, 17, 16, 176, 53, 248, 246, 247, 158, 109, 216, 219, 220, 21, 53, 48, 10, 219, 60, 221, 212, 253, 75, 217, 24, 249, 163, 44, 196, 156, 131, 224, 200, 42, 31, 100, 55, 131, 217, 183, 130, 19, 99, 116, 171, 252, 153, 16, 83, 191, 63, 118, 194, 241, 139, 50, 210, 63, 94, 91, 219, 215, 45, 252, 152, 126, 24, 88, 241, 66, 173, 11, 191, 158, 172, 223, 92, 162, 23, 41, 248, 77, 210, 44, 104, 77, 147, 182, 162, 30, 19, 66, 230, 100, 34, 123, 227, 249, 16, 0, 0, 0, 0, 0, 0, 3, 245, 67, 18, 44, 41, 192, 163, 187, 120, 210, 171, 253, 202, 40, 228, 70, 35, 177, 126, 237, 52, 158, 233, 96, 117, 58, 144, 183, 176, 235, 194, 1, 28, 180, 87, 183, 208, 59, 108, 116, 200, 17, 135, 37, 167, 183, 161, 98, 170, 215, 153, 201, 90, 107, 193, 46, 186, 56, 92, 26, 179, 176, 45, 31, 5, 219, 15, 64, 157, 157, 222, 141, 209, 183, 144, 141, 187, 51, 210, 101, 15, 37, 142, 87, 23, 106, 139, 118, 130, 208, 105, 119, 21, 253, 29, 133, 47, 202, 95, 97, 154, 25, 219, 213, 65, 129, 54, 174, 98, 118, 63, 202, 163, 250, 236, 249, 74, 88, 40, 113, 41, 104, 181, 217, 57, 7, 244, 13, 35, 249, 44, 57, 203, 154, 218, 9, 52, 64, 230, 104, 197, 95, 127, 222, 153, 124, 145, 232, 170, 211, 197, 109, 204, 20, 252, 226, 215, 250, 19, 250, 16, 10, 104, 155, 249, 133, 158, 17, 78, 121, 247, 217, 220, 37, 64, 148, 120, 244, 80, 209, 41, 11, 164, 250, 61, 151, 139, 246, 46, 60, 220, 194, 10, 235, 239, 194, 254, 243, 140, 66, 4, 9, 27, 123, 124, 127, 23, 134, 116, 136, 73, 109, 185, 147, 234, 155, 81, 53, 54, 37, 81, 233, 94, 177, 1, 185, 175, 118, 213, 106, 97, 161, 202, 156, 76, 169, 31, 110, 26, 11, 135, 221, 203, 139, 171, 73, 129, 252, 145, 184, 127, 153, 104, 252, 102, 112, 21, 155, 162, 97, 183, 63, 131, 186, 209, 95, 49, 212, 92, 80, 77, 92, 27, 173, 226, 101, 147, 224, 158, 196, 3, 172, 197, 204, 174, 71, 122, 8, 32, 255, 148, 179, 66, 220, 198, 57, 196, 159, 230, 140, 184, 6, 144, 185, 11, 79, 129, 227, 95, 7, 58, 16, 32, 143, 198, 233, 108, 77, 156, 252, 3, 167, 239, 80, 95, 222, 169, 209, 40, 117, 195, 183, 81, 121, 67, 206, 253, 248, 4, 87, 17, 11, 236, 222, 255, 246, 252, 5, 189, 150, 81, 15, 3, 14, 44, 139, 254, 120, 244, 85, 22, 183, 9, 72, 103, 226, 196, 109, 206, 58, 193, 70, 139, 248, 51, 49, 158, 108, 135, 135, 185, 61, 199, 87, 24, 20, 186, 251, 190, 149, 120, 197, 4, 168, 164, 95, 119, 149, 165, 26, 81, 94, 198, 147, 47, 30, 116, 242, 210, 83, 7, 91, 47, 253, 95, 71, 48, 0, 0, 0, 0, 0, 0, 2, 12}
	transcript := [2312]uints.U8{}
	for i := range transcriptBytes {
		transcript[i] = uints.NewU8(transcriptBytes[i])
	}

	assignment := WhirSkyscraperCircuit{
		IO:         []byte(ioPat),
		Transcript: transcript,
	}

	witness, _ := frontend.NewWitness(&assignment, ecc.BN254.ScalarField())
	publicWitness, _ := witness.Public()

	proof, _ := groth16.Prove(ccs, pk, witness)
	vErr := groth16.Verify(proof, vk, publicWitness)
	fmt.Printf("%v\n", vErr)
}

func main() {
	ExampleWhirSkyScraper()
}
